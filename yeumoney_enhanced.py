#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
YeuMoney Code Generator - Enhanced UI Version
Author: Upgraded by AI Assistant
Description: Professional code generator with colored UI and enhanced features
"""

import requests
import re
import time
import json
import logging
import os
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

# Try importing optional dependencies for enhanced UI
try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.table import Table
    from rich.progress import Progress, SpinnerColumn, TextColumn
    from rich.prompt import Prompt, Confirm
    RICH_AVAILABLE = True
except ImportError:
    RICH_AVAILABLE = False

try:
    import colorama
    from colorama import Fore, Back, Style
    colorama.init()
    COLORAMA_AVAILABLE = True
except ImportError:
    COLORAMA_AVAILABLE = False

# ========== CONFIGURATION ==========
class APIType(Enum):
    """Enum for different API types"""
    GET_MA = "GET_MA"
    GET_MD = "GET_MD"

@dataclass
class TrafficConfig:
    """Configuration for each traffic source"""
    name: str
    api_type: APIType
    codexn: str
    url: str
    loai_traffic: str
    regex_pattern: str
    clk: int = 1000
    description: str = ""

class EnhancedYeuMoneyGenerator:
    """Enhanced code generator with beautiful UI"""
    
    BASE_URL = "https://traffic-user.net"
    REQUEST_TIMEOUT = 30
    MAX_RETRIES = 3
    RETRY_DELAY = 2
    
    # Enhanced configuration with descriptions
    TRAFFIC_CONFIGS: Dict[str, TrafficConfig] = {
        "m88": TrafficConfig(
            name="M88 Betting",
            api_type=APIType.GET_MA,
            codexn="taodeptrai",
            url="https://bet88ec.com/cach-danh-bai-sam-loc",
            loai_traffic="https://bet88ec.com/",
            regex_pattern=r'<span id="layma_me_vuatraffic"[^>]*>\s*(\d+)\s*</span>',
            description="C√° c∆∞·ª£c th·ªÉ thao v√† casino tr·ª±c tuy·∫øn"
        ),
        
        "fb88": TrafficConfig(
            name="FB88 Sports",
            api_type=APIType.GET_MA,
            codexn="taodeptrai",
            url="https://fb88dq.com/cach-choi-ca-cuoc-golf",
            loai_traffic="https://fb88dq.com/",
            regex_pattern=r'<span id="layma_me_vuatraffic"[^>]*>\s*(\d+)\s*</span>',
            description="C√° c∆∞·ª£c golf v√† th·ªÉ thao"
        ),
        
        "188bet": TrafficConfig(
            name="188BET Casino",
            api_type=APIType.GET_MA,
            codexn="taodeptrailamnhe",
            url="https://88betag.com/cach-choi-game-bai-pok-deng",
            loai_traffic="https://88betag.com/",
            regex_pattern=r'<span id="layma_me_vuatraffic"[^>]*>\s*(\d+)\s*</span>',
            description="Game b√†i Pok Deng online"
        ),
        
        "w88": TrafficConfig(
            name="W88 Poker",
            api_type=APIType.GET_MA,
            codexn="taodeptrai",
            url="https://188.166.185.213/tim-hieu-khai-niem-3-bet-trong-poker-la-gi",
            loai_traffic="https://188.166.185.213/",
            regex_pattern=r'<span id="layma_me_vuatraffic"[^>]*>\s*(\d+)\s*</span>',
            description="Poker v√† game b√†i chuy√™n nghi·ªáp"
        ),
        
        "v9bet": TrafficConfig(
            name="V9BET Basketball",
            api_type=APIType.GET_MA,
            codexn="taodeptrai",
            url="https://v9betho.com/ca-cuoc-bong-ro-ao",
            loai_traffic="https://v9betho.com/",
            regex_pattern=r'<span id="layma_me_vuatraffic"[^>]*>\s*(\d+)\s*</span>',
            description="C√° c∆∞·ª£c b√≥ng r·ªï ·∫£o"
        ),
        
        "vn88": TrafficConfig(
            name="VN88 Card Games",
            api_type=APIType.GET_MA,
            codexn="bomaydeptrai",
            url="https://vn88sv.com/cach-choi-bai-gao-gae",
            loai_traffic="https://vn88sv.com/",
            regex_pattern=r'<span id="layma_me_vuatraffic"[^>]*>\s*(\d+)\s*</span>',
            description="Game b√†i Gao Gae truy·ªÅn th·ªëng"
        ),
        
        "bk8": TrafficConfig(
            name="BK8 Card Games",
            api_type=APIType.GET_MA,
            codexn="taodeptrai",
            url="https://bk8ze.com/cach-choi-bai-catte",
            loai_traffic="https://bk8ze.com/",
            regex_pattern=r'<span id="layma_me_vuatraffic"[^>]*>\s*(\d+)\s*</span>',
            description="Game b√†i Catte online"
        ),
        
        "88betag": TrafficConfig(
            name="88BET AG Direct",
            api_type=APIType.GET_MD,
            codexn="bomaylavua",
            url="https://88betag.com/keo-chau-a-la-gi",
            loai_traffic="https://88betag.com/",
            regex_pattern=r'<span id="layma_me_tfudirect"[^>]*>\s*(\d+)\s*</span>',
            description="K√®o ch√¢u √Å chuy√™n nghi·ªáp"
        ),
        
        "w88abc": TrafficConfig(
            name="W88ABC Mobile Gaming",
            api_type=APIType.GET_MD,
            codexn="bomaylavua",
            url="https://w88abc.com/cach-choi-ca-cuoc-lien-quan-mobile",
            loai_traffic="https://w88abc.com/",
            regex_pattern=r'<span id="layma_me_tfudirect"[^>]*>\s*(\d+)\s*</span>',
            description="C√° c∆∞·ª£c Li√™n Qu√¢n Mobile"
        ),
        
        "v9betlg": TrafficConfig(
            name="V9BET Flat Betting",
            api_type=APIType.GET_MD,
            codexn="bomaylavua",
            url="https://v9betlg.com/phuong-phap-cuoc-flat-betting",
            loai_traffic="https://v9betlg.com/",
            regex_pattern=r'<span id="layma_me_tfudirect"[^>]*>\s*(\d+)\s*</span>',
            description="Ph∆∞∆°ng ph√°p c∆∞·ª£c Flat Betting"
        ),
        
        "bk8xo": TrafficConfig(
            name="BK8XO Lottery",
            api_type=APIType.GET_MD,
            codexn="bomaylavua",
            url="https://bk8xo.com/lo-ba-cang-la-gi",
            loai_traffic="https://bk8xo.com/",
            regex_pattern=r'<span id="layma_me_tfudirect"[^>]*>\s*(\d+)\s*</span>',
            description="L√¥ ba c√†ng v√† x·ªï s·ªë"
        ),
        
        "vn88ie": TrafficConfig(
            name="VN88IE Lottery System",
            api_type=APIType.GET_MD,
            codexn="bomaylavua",
            url="https://vn88ie.com/cach-nuoi-lo-khung",
            loai_traffic="https://vn88ie.com/",
            regex_pattern=r'<span id="layma_me_tfudirect"[^>]*>\s*(\d+)\s*</span>',
            description="Nu√¥i l√¥ khung chuy√™n nghi·ªáp"
        ),
        
        "w88xlm": TrafficConfig(
            name="W88XLM Solitaire",
            api_type=APIType.GET_MA,
            codexn="taodeptrai",
            url="https://w88xlm.com/cach-choi-bai-solitaire",
            loai_traffic="https://w88xlm.com/",
            regex_pattern=r'<span id="layma_me_vuatraffic"[^>]*>\s*(\d+)\s*</span>',
            description="Game b√†i Solitaire kinh ƒëi·ªÉn"
        )
    }
    
    def __init__(self):
        """Initialize the generator"""
        self.console = Console() if RICH_AVAILABLE else None
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'vi-VN,vi;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive'
        })
        
        # Setup logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('yeumoney_enhanced.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        self.logger.info("Enhanced YeuMoney Generator initialized successfully")
    
    def print_colored(self, text: str, color: str = "white") -> None:
        """Print colored text if colorama is available"""
        if COLORAMA_AVAILABLE:
            colors = {
                "red": Fore.RED,
                "green": Fore.GREEN,
                "yellow": Fore.YELLOW,
                "blue": Fore.BLUE,
                "magenta": Fore.MAGENTA,
                "cyan": Fore.CYAN,
                "white": Fore.WHITE,
                "bright_green": Fore.LIGHTGREEN_EX,
                "bright_red": Fore.LIGHTRED_EX,
                "bright_yellow": Fore.LIGHTYELLOW_EX
            }
            print(f"{colors.get(color, Fore.WHITE)}{text}{Style.RESET_ALL}")
        else:
            print(text)
    
    def display_welcome_message(self) -> None:
        """Display enhanced welcome message"""
        if RICH_AVAILABLE:
            welcome_panel = Panel.fit(
                "[bold blue]üéØ YEUMONEY CODE GENERATOR - ENHANCED VERSION üéØ[/bold blue]\n"
                "[green]üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:[/green]\n"
                "   ‚Ä¢ Ch·ªçn lo·∫°i quest t·ª´ danh s√°ch b√™n d∆∞·ªõi\n"
                "   ‚Ä¢ Ch·ªù kho·∫£ng 80 gi√¢y ƒë·ªÉ l·∫•y m√£\n"
                "   ‚Ä¢ Nh·∫≠p m√£ v√†o h·ªá th·ªëng ƒë·ªÉ ho√†n th√†nh quest\n"
                "[yellow]üí° Phi√™n b·∫£n n√¢ng c·∫•p v·ªõi giao di·ªán ƒë·∫πp v√† x·ª≠ l√Ω l·ªói t·ªët h∆°n[/yellow]",
                title="[bold magenta]YeuMoney Generator[/bold magenta]",
                border_style="blue"
            )
            self.console.print(welcome_panel)
        else:
            self.print_colored("=" * 60, "cyan")
            self.print_colored("üéØ YEUMONEY CODE GENERATOR - ENHANCED VERSION üéØ", "bright_yellow")
            self.print_colored("=" * 60, "cyan")
            self.print_colored("üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:", "green")
            print("   ‚Ä¢ Ch·ªçn lo·∫°i quest t·ª´ danh s√°ch b√™n d∆∞·ªõi")
            print("   ‚Ä¢ Ch·ªù kho·∫£ng 80 gi√¢y ƒë·ªÉ l·∫•y m√£")
            print("   ‚Ä¢ Nh·∫≠p m√£ v√†o h·ªá th·ªëng ƒë·ªÉ ho√†n th√†nh quest")
            self.print_colored("üí° Phi√™n b·∫£n n√¢ng c·∫•p v·ªõi giao di·ªán ƒë·∫πp v√† x·ª≠ l√Ω l·ªói t·ªët h∆°n", "yellow")
            self.print_colored("=" * 60, "cyan")
            print()
    
    def display_available_types(self) -> None:
        """Display available types with enhanced formatting"""
        if RICH_AVAILABLE:
            table = Table(title="üéÆ C√ÅC LO·∫†I QUEST KH·∫¢ D·ª§NG", title_style="bold magenta")
            table.add_column("STT", style="cyan", width=4)
            table.add_column("API", style="green", width=6)
            table.add_column("M√£ Quest", style="yellow", width=12)
            table.add_column("T√™n", style="blue", width=20)
            table.add_column("M√¥ t·∫£", style="white", width=30)
            
            for i, (key, config) in enumerate(self.TRAFFIC_CONFIGS.items(), 1):
                api_badge = "üîµ MA" if config.api_type == APIType.GET_MA else "üü¢ MD"
                table.add_row(
                    str(i),
                    api_badge,
                    key,
                    config.name,
                    config.description
                )
            
            self.console.print(table)
            self.console.print("[bold yellow]üí° M·∫πo: Nh·∫≠p ch√≠nh x√°c t√™n quest (v√≠ d·ª•: m88, fb88, v9bet...)[/bold yellow]")
        else:
            self.print_colored("üéÆ C√ÅC LO·∫†I QUEST KH·∫¢ D·ª§NG:", "bright_yellow")
            self.print_colored("-" * 80, "cyan")
            
            for i, (key, config) in enumerate(self.TRAFFIC_CONFIGS.items(), 1):
                api_badge = "üîµ MA" if config.api_type == APIType.GET_MA else "üü¢ MD"
                self.print_colored(f"{i:2d}. {api_badge} {key:<12} - {config.name:<20} | {config.description}", "white")
            
            self.print_colored("-" * 80, "cyan")
            self.print_colored("üí° M·∫πo: Nh·∫≠p ch√≠nh x√°c t√™n quest (v√≠ d·ª•: m88, fb88, v9bet...)", "yellow")
            print()
    
    def validate_quest_type(self, quest_type: str) -> bool:
        """Validate if quest type is supported"""
        if quest_type == "188.166.185.213":
            return True
        return quest_type.lower() in self.TRAFFIC_CONFIGS
    
    def get_quest_config(self, quest_type: str) -> Optional[TrafficConfig]:
        """Get configuration for quest type"""
        if quest_type == "188.166.185.213":
            return self.TRAFFIC_CONFIGS.get("w88abc")
        return self.TRAFFIC_CONFIGS.get(quest_type.lower())
    
    def make_request_with_retry(self, url: str, params: Dict) -> Optional[str]:
        """Make HTTP request with retry mechanism and progress indication"""
        if RICH_AVAILABLE:
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=self.console
            ) as progress:
                task = progress.add_task("ƒêang g·ª≠i y√™u c·∫ßu...", total=None)
                
                for attempt in range(self.MAX_RETRIES):
                    try:
                        progress.update(task, description=f"Th·ª≠ l·∫ßn {attempt + 1}/{self.MAX_RETRIES}...")
                        
                        response = self.session.post(
                            url, 
                            data=params, 
                            timeout=self.REQUEST_TIMEOUT,
                            allow_redirects=True
                        )
                        response.raise_for_status()
                        
                        progress.update(task, description="‚úÖ Y√™u c·∫ßu th√†nh c√¥ng!")
                        time.sleep(0.5)  # Show success message briefly
                        return response.text
                        
                    except requests.exceptions.RequestException as e:
                        self.logger.warning(f"Request attempt {attempt + 1} failed: {str(e)}")
                        if attempt < self.MAX_RETRIES - 1:
                            progress.update(task, description=f"‚ùå Th·∫•t b·∫°i, th·ª≠ l·∫°i sau {self.RETRY_DELAY}s...")
                            time.sleep(self.RETRY_DELAY)
                        else:
                            progress.update(task, description="‚ùå T·∫•t c·∫£ c√°c l·∫ßn th·ª≠ ƒë·ªÅu th·∫•t b·∫°i")
                            time.sleep(0.5)
                            return None
        else:
            for attempt in range(self.MAX_RETRIES):
                try:
                    self.print_colored(f"üîÑ ƒêang th·ª≠ l·∫ßn {attempt + 1}/{self.MAX_RETRIES}...", "yellow")
                    
                    response = self.session.post(
                        url, 
                        data=params, 
                        timeout=self.REQUEST_TIMEOUT,
                        allow_redirects=True
                    )
                    response.raise_for_status()
                    
                    self.print_colored("‚úÖ Y√™u c·∫ßu th√†nh c√¥ng!", "green")
                    return response.text
                    
                except requests.exceptions.RequestException as e:
                    self.logger.warning(f"Request attempt {attempt + 1} failed: {str(e)}")
                    if attempt < self.MAX_RETRIES - 1:
                        self.print_colored(f"‚ùå Th·∫•t b·∫°i, th·ª≠ l·∫°i sau {self.RETRY_DELAY} gi√¢y...", "red")
                        time.sleep(self.RETRY_DELAY)
                    else:
                        self.print_colored("‚ùå T·∫•t c·∫£ c√°c l·∫ßn th·ª≠ ƒë·ªÅu th·∫•t b·∫°i", "bright_red")
                        return None
    
    def extract_code_from_html(self, html: str, pattern: str) -> Optional[str]:
        """Extract code from HTML using regex pattern"""
        try:
            match = re.search(pattern, html)
            if match:
                code = match.group(1).strip()
                self.logger.info(f"Code extracted successfully: {code}")
                return code
            else:
                self.logger.warning("No code found in HTML response")
                return None
        except Exception as e:
            self.logger.error(f"Error extracting code: {str(e)}")
            return None
    
    def generate_code(self, quest_type: str) -> Tuple[bool, str]:
        """Generate code for specified quest type"""
        try:
            # Validate quest type
            if not self.validate_quest_type(quest_type):
                return False, f"‚ùå Lo·∫°i quest '{quest_type}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!"
            
            # Get configuration
            config = self.get_quest_config(quest_type)
            if not config:
                return False, f"‚ùå Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh cho '{quest_type}'"
            
            # Build API URL
            api_endpoint = f"{config.api_type.value}.php"
            api_url = f"{self.BASE_URL}/{api_endpoint}"
            
            # Build parameters
            codexn_param = "codexn" if config.api_type == APIType.GET_MA else "codexnd"
            params = {
                codexn_param: config.codexn,
                "url": config.url,
                "loai_traffic": config.loai_traffic,
                "clk": config.clk
            }
            
            self.logger.info(f"Generating code for {config.name} ({quest_type})")
            
            if RICH_AVAILABLE:
                self.console.print(f"üîÑ ƒêang x·ª≠ l√Ω quest: [bold blue]{config.name}[/bold blue]")
                self.console.print("‚è≥ Vui l√≤ng ch·ªù kho·∫£ng 80 gi√¢y...")
            else:
                self.print_colored(f"üîÑ ƒêang x·ª≠ l√Ω quest: {config.name}", "blue")
                self.print_colored("‚è≥ Vui l√≤ng ch·ªù kho·∫£ng 80 gi√¢y...", "yellow")
            
            # Make request
            html_response = self.make_request_with_retry(api_url, params)
            if not html_response:
                return False, "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server ho·∫∑c request th·∫•t b·∫°i"
            
            # Extract code
            code = self.extract_code_from_html(html_response, config.regex_pattern)
            if code:
                success_msg = f"‚úÖ M√£ code th√†nh c√¥ng: {code}"
                self.logger.info(f"Code generation successful for {quest_type}: {code}")
                return True, success_msg
            else:
                return False, "‚ùå Kh√¥ng t√¨m th·∫•y m√£ trong ph·∫£n h·ªìi t·ª´ server"
                
        except Exception as e:
            error_msg = f"‚ùå L·ªói kh√¥ng mong mu·ªën: {str(e)}"
            self.logger.error(f"Unexpected error in generate_code: {str(e)}")
            return False, error_msg
    
    def run_interactive_mode(self) -> None:
        """Run the generator in enhanced interactive mode"""
        self.display_welcome_message()
        
        while True:
            try:
                self.display_available_types()
                
                if RICH_AVAILABLE:
                    quest_type = Prompt.ask(
                        "üéØ Nh·∫≠p lo·∫°i quest (ho·∫∑c 'exit' ƒë·ªÉ tho√°t)",
                        console=self.console
                    ).strip()
                else:
                    quest_type = input("üéØ Nh·∫≠p lo·∫°i quest (ho·∫∑c 'exit' ƒë·ªÉ tho√°t): ").strip()
                
                if quest_type.lower() in ['exit', 'quit', 'q']:
                    if RICH_AVAILABLE:
                        self.console.print("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng YeuMoney Generator!", style="bold green")
                    else:
                        self.print_colored("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng YeuMoney Generator!", "green")
                    break
                
                if not quest_type:
                    if RICH_AVAILABLE:
                        self.console.print("‚ö†Ô∏è  Vui l√≤ng nh·∫≠p lo·∫°i quest!", style="bold yellow")
                    else:
                        self.print_colored("‚ö†Ô∏è  Vui l√≤ng nh·∫≠p lo·∫°i quest!", "yellow")
                    continue
                
                # Generate code
                if RICH_AVAILABLE:
                    self.console.print(Panel("", title="[bold blue]ƒêang x·ª≠ l√Ω...[/bold blue]"))
                else:
                    self.print_colored("\n" + "="*50, "cyan")
                
                success, message = self.generate_code(quest_type)
                
                if RICH_AVAILABLE:
                    if success:
                        self.console.print(Panel(message, title="[bold green]K·∫øt qu·∫£[/bold green]", border_style="green"))
                    else:
                        self.console.print(Panel(message, title="[bold red]L·ªói[/bold red]", border_style="red"))
                else:
                    if success:
                        self.print_colored(message, "bright_green")
                    else:
                        self.print_colored(message, "bright_red")
                    self.print_colored("="*50 + "\n", "cyan")
                
                # Ask if user wants to continue
                if RICH_AVAILABLE:
                    continue_choice = Confirm.ask("üîÑ B·∫°n c√≥ mu·ªën t·∫°o m√£ kh√°c kh√¥ng?", console=self.console)
                else:
                    continue_input = input("üîÑ B·∫°n c√≥ mu·ªën t·∫°o m√£ kh√°c kh√¥ng? (y/n): ").strip().lower()
                    continue_choice = continue_input in ['y', 'yes', '']
                
                if not continue_choice:
                    if RICH_AVAILABLE:
                        self.console.print("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng YeuMoney Generator!", style="bold green")
                    else:
                        self.print_colored("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng YeuMoney Generator!", "green")
                    break
                    
                print("\n")
                
            except KeyboardInterrupt:
                if RICH_AVAILABLE:
                    self.console.print("\n\nüëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng YeuMoney Generator!", style="bold green")
                else:
                    self.print_colored("\n\nüëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng YeuMoney Generator!", "green")
                break
            except Exception as e:
                self.logger.error(f"Error in interactive mode: {str(e)}")
                if RICH_AVAILABLE:
                    self.console.print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {str(e)}", style="bold red")
                else:
                    self.print_colored(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {str(e)}", "bright_red")
                continue

def main():
    """Main function"""
    try:
        generator = EnhancedYeuMoneyGenerator()
        generator.run_interactive_mode()
    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng: {str(e)}")

if __name__ == "__main__":
    main()
